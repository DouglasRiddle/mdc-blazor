@namespace MdcBlazor
@typeparam T

<td class="mdc-data-table__cell @Class @(IsNumeric ? "mdc-data-table__header-cell--numeric" : "")" title="@Title" style="@Style" @onclick="OnClick">@ChildContent</td>

@code {
    [CascadingParameter] MdcTable<T> Table { get; set; }

    /// <summary>
    /// Optional. Adds custom class string to the component
    /// </summary>
    [Parameter] public string Class { get; set; }

    /// <summary>
    /// Required. Sets the column header text
    /// </summary>
    [Parameter] public string HeaderText { get; set; }

    /// <summary>
    /// Optional. A <c>true</c> value indicates this value contains numeric content
    /// </summary>
    [Parameter] public bool IsNumeric { get; set; }

    /// <summary>
    /// Optional. Pass code to run when this component is clicked.
    /// </summary>
    /// <remarks>In Blazor this is typically a lambda or method name.</remarks>
    /// <example>
    /// <code>
    /// OnClick="@(() => someBool = true)"
    /// // or
    /// OnClick="@SomeMethod"
    /// </code>
    /// </example>
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    /// <summary>
    /// Optional. Sets the property to sort by when this column's header is selected.
    /// </summary>
    /// <remark>
    /// This value should match the property name exactly
    /// </remark>
    [Parameter] public string SortColumn { get; set; }

    /// <summary>
    /// Optional. Adds custom style string to the component
    /// </summary>
    [Parameter] public string Style { get; set; }

    /// <summary>
    /// Optional. Adds tooltip on column hover
    /// </summary>
    [Parameter] public string Title { get; set; }

    /// <summary>
    /// Required. Sets the type of the <see cref="MdcTableColumn{T}"/>.
    /// </summary>
    /// <remarks>
    /// Typically this is the <c>Context</c> value in <see cref="MdcTable{TItem}"/>
    /// </remarks>
    [Parameter] public T RowItem { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Required if a unique value is not generated by the combination of the HeaderText, IsNumeric and SortColumn parameters
    /// </summary>
    [Parameter] public string UniqueKey { get; set; }

    protected override void OnInitialized()
    {
        if (Table.headersNotSet
            // No UniqueKey value, check for uniqueness by parameter value
            && ((string.IsNullOrWhiteSpace(UniqueKey) && (Table.headerList.Where(i => i.Label == HeaderText && i.IsNumeric == IsNumeric && i.SortColumn == SortColumn).FirstOrDefault() == null))
                // Check by UniqueKey value
                || (!string.IsNullOrWhiteSpace(UniqueKey) && (Table.headerList.Where(i => i.UniqueKey == UniqueKey).FirstOrDefault() == null))))
        {
            Table.AddColumnItem(
            new TableHeader
            {
                UniqueKey = UniqueKey,
                Label = HeaderText,
                IsNumeric = IsNumeric,
                SortColumn = SortColumn
            }
            );
        }
        else if (Table.headersNotSet)
        { Table.headersNotSet = false; }

        base.OnInitialized();
    }
}